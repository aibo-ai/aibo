import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';

export interface DalleImageRequest {
  prompt: string;
  size?: '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792';
  quality?: 'standard' | 'hd';
  style?: 'vivid' | 'natural';
  n?: number;
  response_format?: 'url' | 'b64_json';
}

export interface DalleImageResponse {
  created: number;
  data: Array<{
    url?: string;
    b64_json?: string;
    revised_prompt?: string;
  }>;
}

export interface ContentImageRequest {
  topic: string;
  contentType: string;
  audience: string;
  keyPoints?: string[];
  style?: 'infographic' | 'illustration' | 'diagram' | 'chart' | 'conceptual';
  colorScheme?: 'professional' | 'vibrant' | 'minimal' | 'corporate';
}

export interface GeneratedImage {
  id: string;
  url: string;
  prompt: string;
  revisedPrompt?: string;
  metadata: {
    topic: string;
    contentType: string;
    audience: string;
    style: string;
    colorScheme: string;
    size: string;
    quality: string;
    generatedAt: string;
  };
}

@Injectable()
export class DalleImageService {
  private readonly logger = new Logger(DalleImageService.name);
  private readonly apiKey: string;
  private readonly apiUrl: string;

  constructor(private configService: ConfigService) {
    this.apiKey = this.configService.get<string>('OPEANAI_API_KEY') || 
                  this.configService.get<string>('OPENAI_API_KEY');
    this.apiUrl = this.configService.get<string>('OPENAI_API_URL') || 
                  'https://api.openai.com/v1/images/generations';

    if (!this.apiKey) {
      this.logger.warn('OpenAI API key not configured. DALL-E image generation will be disabled.');
    }
  }

  /**
   * Generate an image using DALL-E based on content context
   */
  async generateContentImage(request: ContentImageRequest): Promise<GeneratedImage> {
    if (!this.apiKey) {
      throw new Error('OpenAI API key not configured');
    }

    try {
      this.logger.log(`Generating image for topic: ${request.topic}`);

      // Create a sophisticated prompt based on content context
      const prompt = this.buildImagePrompt(request);
      
      // Generate image using DALL-E
      const dalleRequest: DalleImageRequest = {
        prompt,
        size: this.getOptimalSize(request.contentType),
        quality: 'hd',
        style: request.style === 'infographic' ? 'vivid' : 'natural',
        n: 1,
        response_format: 'url'
      };

      const response = await this.generateImage(dalleRequest);
      
      if (!response.data || response.data.length === 0) {
        throw new Error('No image generated by DALL-E');
      }

      const imageData = response.data[0];
      
      return {
        id: `dalle_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        url: imageData.url!,
        prompt,
        revisedPrompt: imageData.revised_prompt,
        metadata: {
          topic: request.topic,
          contentType: request.contentType,
          audience: request.audience,
          style: request.style || 'illustration',
          colorScheme: request.colorScheme || 'professional',
          size: dalleRequest.size!,
          quality: dalleRequest.quality!,
          generatedAt: new Date().toISOString()
        }
      };

    } catch (error) {
      this.logger.error(`Failed to generate content image: ${error.message}`);
      throw error;
    }
  }

  /**
   * Generate image using DALL-E API
   */
  async generateImage(request: DalleImageRequest): Promise<DalleImageResponse> {
    try {
      const response = await axios.post(
        this.apiUrl,
        request,
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 60000 // 60 second timeout for image generation
        }
      );

      return response.data;
    } catch (error) {
      if (error.response) {
        this.logger.error(`DALL-E API error: ${error.response.status} - ${JSON.stringify(error.response.data)}`);
        throw new Error(`DALL-E API error: ${error.response.data.error?.message || error.response.statusText}`);
      } else if (error.request) {
        this.logger.error('DALL-E API request timeout or network error');
        throw new Error('DALL-E API request failed - network error');
      } else {
        this.logger.error(`DALL-E request setup error: ${error.message}`);
        throw error;
      }
    }
  }

  /**
   * Build sophisticated image prompt based on content context
   */
  private buildImagePrompt(request: ContentImageRequest): string {
    const { topic, contentType, audience, keyPoints, style, colorScheme } = request;
    
    // Base prompt components
    const styleDescriptor = this.getStyleDescriptor(style || 'illustration');
    const colorDescriptor = this.getColorDescriptor(colorScheme || 'professional');
    const audienceDescriptor = this.getAudienceDescriptor(audience);
    const contentTypeDescriptor = this.getContentTypeDescriptor(contentType);

    // Build comprehensive prompt
    let prompt = `Create a ${styleDescriptor} ${colorDescriptor} image for ${audienceDescriptor} about "${topic}". `;
    
    prompt += `This image will be used in a ${contentTypeDescriptor}. `;

    if (keyPoints && keyPoints.length > 0) {
      prompt += `The image should visually represent these key concepts: ${keyPoints.slice(0, 3).join(', ')}. `;
    }

    // Add style-specific instructions
    if (style === 'infographic') {
      prompt += 'Design as a clean, modern infographic with clear visual hierarchy, icons, and data visualization elements. ';
    } else if (style === 'diagram') {
      prompt += 'Create a clear, technical diagram with labeled components and logical flow. ';
    } else if (style === 'chart') {
      prompt += 'Design as a professional chart or graph showing data relationships and trends. ';
    } else {
      prompt += 'Create a conceptual illustration that captures the essence of the topic. ';
    }

    // Add quality and technical specifications
    prompt += 'High quality, professional design, clean composition, appropriate typography if text is included. ';
    prompt += 'Ensure the image is suitable for business presentations and professional publications.';

    return prompt;
  }

  private getStyleDescriptor(style: string): string {
    const styles = {
      'infographic': 'modern, clean infographic-style',
      'illustration': 'professional illustration',
      'diagram': 'technical diagram',
      'chart': 'data visualization chart',
      'conceptual': 'conceptual artistic'
    };
    return styles[style] || 'professional illustration';
  }

  private getColorDescriptor(colorScheme: string): string {
    const colors = {
      'professional': 'with professional blue and gray color palette',
      'vibrant': 'with vibrant, energetic colors',
      'minimal': 'with minimal, monochromatic design',
      'corporate': 'with corporate brand colors'
    };
    return colors[colorScheme] || 'with professional color scheme';
  }

  private getAudienceDescriptor(audience: string): string {
    const audiences = {
      'b2b': 'business professionals and executives',
      'b2c': 'general consumers and end users',
      'technical': 'technical professionals and engineers',
      'academic': 'researchers and academics',
      'general': 'a general professional audience'
    };
    return audiences[audience] || 'a professional audience';
  }

  private getContentTypeDescriptor(contentType: string): string {
    const types = {
      'blog_post': 'blog post article',
      'whitepaper': 'professional whitepaper',
      'case_study': 'business case study',
      'report': 'analytical report',
      'presentation': 'business presentation',
      'infographic': 'standalone infographic',
      'social_media': 'social media content'
    };
    return types[contentType] || 'professional content piece';
  }

  private getOptimalSize(contentType: string): '256x256' | '512x512' | '1024x1024' | '1792x1024' | '1024x1792' {
    const sizeMap = {
      'blog_post': '1024x1024',
      'whitepaper': '1792x1024',
      'case_study': '1024x1024',
      'report': '1792x1024',
      'presentation': '1792x1024',
      'infographic': '1024x1792',
      'social_media': '1024x1024'
    };
    return (sizeMap[contentType] as any) || '1024x1024';
  }

  /**
   * Check if DALL-E service is available
   */
  isAvailable(): boolean {
    return !!this.apiKey;
  }

  /**
   * Get service status
   */
  getStatus(): { available: boolean; configured: boolean } {
    return {
      available: this.isAvailable(),
      configured: !!this.apiKey
    };
  }
}
