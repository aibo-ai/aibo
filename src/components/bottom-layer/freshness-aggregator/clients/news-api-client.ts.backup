import { AxiosRequestConfig } from 'axios';
import { Logger } from '@nestjs/common';
import { EnhancedBaseApiClient, RateLimitConfig } from './enhanced-base-client';
import { ContentType, NewsArticle } from '../models/content-models';
import { v4 as uuidv4 } from 'uuid';
import { RetryOptions } from '../../../../common/utils/retry-utils';

/**
 * NewsAPI response interfaces
 */
interface NewsApiResponse {
  status: string;
  totalResults: number;
  articles: NewsApiArticle[];
}

interface NewsApiArticle {
  source: {
    id: string | null;
    name: string;
  };
  author: string | null;
  title: string;
  description: string | null;
  url: string;
  urlToImage: string | null;
  publishedAt: string;
  content: string | null;
}

/**
 * NewsAPI client for fetching news articles with rate limiting and circuit breaking
 */
export class NewsApiClient extends EnhancedBaseApiClient {
  private readonly apiKey: string;
  private readonly retryOptions: RetryOptions = {
    maxRetries: 3,
    initialDelayMs: 1000,
    maxDelayMs: 10000,
    factor: 2,
    jitter: true
  };

  constructor(apiKey?: string) {
    const actualApiKey = apiKey || process.env.NEWS_API_KEY;
    
    if (!actualApiKey) {
      throw new Error('NewsAPI key is required. Set NEWS_API_KEY environment variable or pass it to the constructor.');
    }
    
    super(
      'https://newsapi.org/v2',
      actualApiKey, // Pass API key for auth header
      'NewsApiClient',
      NEWS_API_RATE_LIMIT,
      {
        failureThreshold: 3,
        resetTimeout: 60000, // 1 minute
        successThreshold: 2,
        timeout: 10000 // 10 seconds
      }
    );
    
    this.apiKey = actualApiKey;
    
    // Set default headers
    this.axios.defaults.headers.common['X-Api-Key'] = this.apiKey;
  }

  /**
   * Make a request to the NewsAPI with proper error handling and retries
   */
  private async makeRequest<T = any>(
    endpoint: string,
    params: Record<string, any> = {},
    retryOptions?: RetryOptions
  ): Promise<T> {
    const requestId = uuidv4();
    
    try {
      return await this.get<T>(
        endpoint,
        {
          params,
          headers: {
            'X-Request-ID': requestId,
            'Content-Type': 'application/json'
          }
        },
        { ...this.retryOptions, ...retryOptions }
      );
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      const statusCode = error.response?.status;
      
      this.logger.error(`[${requestId}] Request failed: ${errorMessage}`, {
        endpoint,
        statusCode,
        params: this.maskSensitiveData(params)
      });
      
      // Handle specific NewsAPI errors
      if (statusCode === 429) {
        throw new Error('Rate limit exceeded. Please wait before making more requests.');
      } else if (statusCode === 401) {
        throw new Error('Invalid API key. Please check your NewsAPI key.');
      } else if (statusCode === 426) {
        throw new Error('Your plan only allows HTTP connections. Please upgrade to a plan that supports HTTPS.');
      }
      
      throw error;
    }
  }
  
  /**
   * Mask sensitive data in logs
   */
  private maskSensitiveData(data: any): any {
    if (!data) return data;
    
    const masked = { ...data };
    if (masked.apiKey) masked.apiKey = '***';
    if (masked.api_key) masked.api_key = '***';
    if (masked['X-Api-Key']) masked['X-Api-Key'] = '***';
    
    return masked;
  }
  
  /**
   * Check if the client is properly configured
   */
  isConfigured(): boolean {
    return !!this.apiKey;
  }

  /**
   * Search for news articles
   * @param query Search query
   * @param options Search options
   * @returns Array of news articles
   */
  /**
   * Search for news articles
   */
  async searchNews(
    query: string, 
    options: NewsApiSearchOptions = {}
  ): Promise<NewsArticle[]> {
    language?: string;
    sortBy?: 'relevancy' | 'popularity' | 'publishedAt';
    from?: string;
    to?: string;
    pageSize?: number;
    page?: number;
    sources?: string[];
    domains?: string[];
    excludeDomains?: string[];
  } = {}): Promise<NewsArticle[]> {
    try {
      // Validate API key
      if (!this.isConfigured()) {
        throw new Error('NewsAPI client is not properly configured. Missing API key.');
      }

      // Validate query
      if (!query || typeof query !== 'string' || query.trim() === '') {
        throw new Error('Search query is required');
      }

      // Validate and sanitize options
      const validatedOptions = {
        language: options.language || 'en',
        sortBy: ['relevancy', 'popularity', 'publishedAt'].includes(options.sortBy || '')
          ? options.sortBy
          : 'publishedAt',
        from: options.from,
        to: options.to,
        pageSize: Math.min(100, Math.max(1, options.pageSize || 20)), // Max 100 per page
        page: Math.max(1, options.page || 1),
        sources: Array.isArray(options.sources) ? options.sources.join(',') : undefined,
        domains: Array.isArray(options.domains) ? options.domains.join(',') : undefined,
        excludeDomains: Array.isArray(options.excludeDomains) ? options.excludeDomains.join(',') : undefined
      };

      // Log the request for debugging
      this.logger.debug('NewsAPI search request:', {
        query,
    }

    return this.mapArticles(response.articles || []);
  }

  /**
   * Get top headlines
   * @param options Headlines options
   * @returns Array of news articles
   */
  async getTopHeadlines(options: {
    country?: string;
    category?: string;
    sources?: string[];
    q?: string;
    pageSize?: number;
    page?: number;
  } = {}): Promise<NewsArticle[]> {
    const params: Record<string, any> = {
      ...(options.country && { country: options.country }),
      ...(options.category && { category: options.category }),
      ...(options.sources && { sources: options.sources.join(',') }),
      ...(options.query && { q: options.query }),
      pageSize: options.limit || 10,
      page: options.page || 1
    };

    const response = await this.makeRequest<NewsApiResponse>('/top-headlines', params);
    
    if (response.status !== 'ok') {
      throw new Error(response.message || 'Failed to fetch top headlines');
    }

    return this.mapArticles(response.articles || []);
  }

  /**
   * Get available news sources
   */
  async getSources(options: {
    country?: string;
    category?: string;
    sources?: string[];
    q?: string;
    pageSize?: number;
    page?: number;
  } = {}): Promise<NewsArticle[]> {
    const params: Record<string, any> = {
      ...(options.country && { country: options.country }),
      ...(options.category && { category: options.category }),
      ...(options.sources && { sources: options.sources.join(',') }),
      ...(options.query && { q: options.query }),
      pageSize: options.limit || 10,
      page: options.page || 1
    };

    const response = await this.makeRequest<NewsApiResponse>('/sources', params);
    
    if (response.status !== 'ok') {
      throw new Error(response.message || 'Failed to fetch news sources');
    }

    return this.mapArticles(response.articles || []);
  }

  /**
   * Map NewsAPI articles to our NewsArticle model
   * @param articles NewsAPI articles
   * @returns Mapped news articles
   */
  private mapArticles(articles: NewsApiArticle[]): NewsArticle[] {
    const now = new Date();
    
    return articles.map(article => ({
      id: uuidv4(),
      title: article.title,
      url: article.url,
      source: article.source.name,
      sourceId: article.source.id || undefined,
      publishedAt: new Date(article.publishedAt),
      retrievedAt: now,
      contentType: ContentType.NEWS,
      snippet: article.description || undefined,
      author: article.author || undefined,
      imageUrl: article.urlToImage || undefined,
      category: undefined // NewsAPI doesn't provide category in the response
    }));
  }
}
