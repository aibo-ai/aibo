# Default values for content-platform
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: "contentplatformacr.azurecr.io"
  imagePullSecrets:
    - name: acr-secret
  storageClass: "managed-premium"

# Application configuration
app:
  name: content-platform
  version: "1.0.0"
  environment: production

# Backend service configuration
backend:
  enabled: true
  name: backend
  image:
    repository: content-creation-platform
    tag: "latest"
    pullPolicy: Always
  
  replicaCount: 3
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
    annotations: {}
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  env:
    NODE_ENV: production
    PORT: "3000"
    LOG_LEVEL: info
    CORS_ORIGIN: "https://contentplatform.com"
    SERVICE_NAME: "content-creation-platform"
    AZURE_REGION: "eastus"
    APP_VERSION: "1.0.0"
  
  secrets:
    DATABASE_URL: ""
    REDIS_URL: ""
    APPLICATIONINSIGHTS_CONNECTION_STRING: ""
    AZURE_STORAGE_CONNECTION_STRING: ""
    OPENAI_API_KEY: ""
    JWT_SECRET: ""
  
  probes:
    liveness:
      enabled: true
      path: /health/liveness
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      enabled: true
      path: /health/readiness
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 3
      failureThreshold: 3
    startup:
      enabled: true
      path: /health/startup
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 30

# Frontend service configuration
frontend:
  enabled: true
  name: frontend
  image:
    repository: content-creation-platform-frontend
    tag: "latest"
    pullPolicy: Always
  
  replicaCount: 2
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
    annotations: {}
  
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70

# Ingress configuration
ingress:
  enabled: true
  className: "azure/application-gateway"
  annotations:
    appgw.ingress.kubernetes.io/ssl-redirect: "true"
    appgw.ingress.kubernetes.io/use-private-ip: "false"
    appgw.ingress.kubernetes.io/backend-path-prefix: "/"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: contentplatform.com
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
    - host: api.contentplatform.com
      paths:
        - path: /
          pathType: Prefix
          service: backend
  tls:
    - secretName: content-platform-tls
      hosts:
        - contentplatform.com
        - api.contentplatform.com

# Security configuration
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
  
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
    capabilities:
      drop:
        - ALL
  
  networkPolicy:
    enabled: true
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                name: ingress-nginx
          - namespaceSelector:
              matchLabels:
                name: kube-system
        ports:
          - protocol: TCP
            port: 3000
    egress:
      - to: []
        ports:
          - protocol: TCP
            port: 443
          - protocol: TCP
            port: 80
          - protocol: TCP
            port: 5432
          - protocol: TCP
            port: 6379
          - protocol: UDP
            port: 53

# Database configuration (external)
database:
  enabled: false
  external:
    enabled: true
    host: ""
    port: 5432
    database: ""
    username: ""
    password: ""
    sslMode: require

# Redis configuration (external)
redis:
  enabled: false
  external:
    enabled: true
    host: ""
    port: 6379
    password: ""
    ssl: true

# Monitoring configuration
monitoring:
  enabled: true
  
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    port: http
  
  prometheusRule:
    enabled: true
    rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second"
  
  grafana:
    enabled: false
    dashboards:
      enabled: true

# Storage configuration
storage:
  enabled: true
  storageClass: "managed-premium"
  accessMode: ReadWriteOnce
  size: 10Gi

# ConfigMap configuration
configMap:
  enabled: true
  data:
    METRICS_COLLECTION_INTERVAL_MS: "60000"
    HEALTH_CHECK_INTERVAL_MS: "30000"
    API_RATE_LIMIT_WINDOW_MS: "900000"
    API_RATE_LIMIT_MAX_REQUESTS: "100"
    CACHE_TTL_SECONDS: "3600"
    SESSION_TIMEOUT_MINUTES: "30"
    MAX_FILE_SIZE_MB: "10"
    SUPPORTED_FILE_TYPES: "pdf,docx,txt,md"

# Service Account configuration
serviceAccount:
  create: true
  annotations:
    azure.workload.identity/client-id: ""
  name: ""

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node selector and tolerations
nodeSelector: {}

tolerations:
  - key: "kubernetes.azure.com/scalesetpriority"
    operator: "Equal"
    value: "spot"
    effect: "NoSchedule"

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - content-platform
          topologyKey: kubernetes.io/hostname
